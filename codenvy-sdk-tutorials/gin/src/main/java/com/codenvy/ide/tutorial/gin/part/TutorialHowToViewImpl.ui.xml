<!--

    Copyright (c) 2012-2014 Codenvy, S.A.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html

    Contributors:
      Codenvy, S.A. - initial API and implementation

-->
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
             xmlns:g='urn:import:com.google.gwt.user.client.ui'>

    <ui:style>
        .scrollPanel {
            position: absolute;
            overflow: auto;
            left: 0;
            top: 0;
            right: 0;
            bottom: 0;
        }
    </ui:style>

    <g:HTMLPanel addStyleNames="{style.scrollPanel}">
        <ul>
            <li>
                <a href="#1">Example 1</a>
            </li>
            <li>
                <a href="#2">Example 2</a>
            </li>
            <li>
                <a href="#3">Example 3</a>
            </li>
            <li>
                <a href="#4">Example 4</a>
            </li>
            <li>
                <a href="#5">Example 5</a>
            </li>
            <li>
                <a href="#6">Example 6</a>
            </li>
            <li>
                <a href="#7">Example 7</a>
            </li>
            <li>
                <a href="#8">Example 8</a>
            </li>
            <li>
                <a href="#9">Example 9</a>
            </li>
            <li>
                <a href="#10">Example 10</a>
            </li>
            <li>
                <a href="#11">Example 11</a>
            </li>
            <li>
                <a href="#list">List of Messages</a>
            </li>
        </ul>

        Running this extension will result in printing out messages in a Console. However, we used different approaches to showing each
        message. Code of the following class is executed step by step:<b>com.codenvy.ide.tutorial.gin.GinExtension</b>:

        <h1 id="1">Example 1</h1>

        When calling method:
        <pre>
            myClass.doSomething();
        </pre>

        The following code is executed:
        <pre>console.print("my implementation");</pre>

        Full code:
        <b>com.codenvy.ide.tutorial.gin.sample.MyImplementation#doSomething</b>

        Well see
        <b>my implementation</b>
        message in Console

        <h1 id="2">Example 2</h1>

        When calling method:
        <pre>mySingletonClass.doSomething();</pre>

        The following code is executed:
        <pre>console.print("my singleton class");</pre>

        Fulle code:
        <b>com.codenvy.ide.tutorial.gin.singleton.MySingletonImplementation#doSomething</b>

        Well see
        <b>my singleton class</b>
        message in Console.

        <h1 id="3">Example 3</h1>

        Next, we show that non-singleton objects created through a provider actually create new objects

        <pre>
            MyClass myClass1 = myClassProvider.get();
            MyClass myClass2 = myClassProvider.get();

            assert myClass != myClass1;
            assert myClass != myClass2;
            assert myClass1 != myClass2;
        </pre>

        Here asserts show that these are different instances of these objects.

        <h1 id="4">Example 4</h1>

        Then, a provider creates Singleton objects, which means that this is one and the same instance:

        <pre>
            MySingletonClass mySingletonClass1 = mySingletonClassProvider.get();
            MySingletonClass mySingletonClass2 = mySingletonClassProvider.get();

            assert mySingletonClass == mySingletonClass1;
            assert mySingletonClass == mySingletonClass2;
        </pre>

        Asserts in this case verify that this is one instance, unlike the abovementioned case.

        <h1 id="5">Example 5</h1>

        In this example, we get an instance with AsyncProvider. When this code loads,
        <b>onSuccess</b>
        method will be triggered, and the following code will work:
        <b>console.print("my implementation");</b>
        (com.codenvy.ide.tutorial.gin.sample.MyImplementation#doSomething)

        <pre>
            myClassAsyncProvider.get(new AsyncCallback&lt;MyClass&gt;() {
            @Override
            public void onSuccess(MyClass result) {
            result.doSomething();
            }

            @Override
            public void onFailure(Throwable caught) {
            console.print(caught.getMessage());
            }
            });
        </pre>


        <h1 id="6">Example 6</h1>

        In this example, we create two objects through a Factory, and call
        <b>doSomething</b>
        methods on them. When this method is called, the text that weve passed over to Factory, will be printed out in Console:

        <pre>
            MyFactoryClass myFactoryClass1 = myFactory.createMyFactoryClass("my factory class 1");
            myFactoryClass1.doSomething();
            MyFactoryClass myFactoryClass2 = myFactory.createMyFactoryClass("my factory class 2");
            myFactoryClass2.doSomething();

            assert myFactoryClass1 != myFactoryClass2;
            assert !myFactoryClass1.equals(myFactoryClass2);
        </pre>

        Asserts verify that these are two absolutely different classes.

        <h1 id="7">Example 7</h1>

        Here we have created an object through a Factory, and print out the same message to Console. The difference with the previous
        example is that in this case we have bound an interface with its implementation:

        <pre>
            SomeInterface someInterface = myFactory.createSomeInterface("some interface 1");
            someInterface.doSomething();
            SomeInterface someInterface2 = myFactory.createSomeInterface("some interface 2");
            someInterface2.doSomething();

            assert someInterface != someInterface2;
            assert !someInterface.equals(someInterface2);
        </pre>

        <h1 id="8">Example 8</h1>

        In this example, we use an instance of a class that gets parameters from a named annotation. It prints out these parameters to a
        console when
        <b>doSomething</b>
        method is triggered:
        <pre>myClassWithNamedParam.doSomething();</pre>

        This is what happens inside the method:
        <pre>console.print(someText);</pre>

        The following message is printed out:
        <pre>"my string value from named annotation"</pre>

        <h1 id="9">Example 9</h1>

        This example focuses on using an instance of an object with a parameter that has been created with a ProvidedMethod:
        <pre>myClassWithProvideParam.doSomething();</pre>

        The following code is executed:
        <pre>console.print(someText);</pre>

        Full code:
        <b>com.codenvy.ide.tutorial.gin.sample.MyClassWithProvideParam#doSomething</b>

        It prints out the following message to Console:
        <pre>"my string value from provider method"</pre>

        When
        <b>MyClassWithProvideParam</b>
        is initialized it gets an instance of a String parameter from ProvidedMethod
        (com.codenvy.ide.tutorial.gin.inject.GinModule#provideStringValue). When this parameter is created, the following code is
        executed:
        <pre>console.print("initialize string value in gin module");</pre>

        <h1 id="10">Example 10</h1>

        In this example we use an instance of an object (i.e. call doSomething method) that gets a String parameter through a custom
        annotation:
        <pre>myClassWithAnnotationParam.doSomething();</pre>

        The following code is executed:
        <pre>
            console.print(text);
        </pre>

        Reference to class: com.codenvy.ide.tutorial.gin.annotation.MyClassWithAnnotationParam#doSomething
        Message printed out to Console:
        <pre>"my string value from MyStringProvider class"</pre>

        <h1 id="11">Example 11</h1>

        In the last example, we have used an instance of an object retrieved through a custom annotation:
        <pre>simpleInterface.doSomething();</pre>

        Code that is executed:
        <pre>console.print(text);</pre>

        Reference to a class: com.codenvy.ide.tutorial.gin.annotation.SimpleImplementation#doSomething

        Message printed out to Console:
        <pre>"my string value from SimpleImplementation class"</pre>

        <h1 id="list">Full list of messages printed out to Console</h1>

        my implementation
        my singleton class
        my factory class 1
        my factory class 2
        some interface 1
        some interface 2
        my string value from named annotation
        my string value from provider method
        my string value from MyStringProvider class
        my string value from SimpleImplementation class
        my implementation
    </g:HTMLPanel>
</ui:UiBinder>